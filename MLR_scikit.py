"""
    Implementation of Multinomial Logistic Regression using sci-kit learn packages
"""

import numpy as np
import pandas as pd
import sklearn.linear_model as lm
import matplotlib.pyplot as plt 
#from sklearn import cross validation  #(brings up error, need to check package name)
from sklearn.model_selection import train_test_split

def obatinDataFromCSV():
    """
        Get data from a CSV file

        features include but not limited to:
            "label","light","sound","geoMag","cellTowerId","localAreaCode","cellTowerSingal"

            *Note: currently "label" is just a number from 1 -> n
        
        returns tuple containing:
            - Numpy array: randomDataLabels
            - Numpy array: randomDataFeatures
            
    """

    randomData = pd.read_csv(filepath_or_buffer="RandomData.csv",header=1,usecols=["label","light","sound","geoMag","cellTowerId","localAreaCode","cellTowerSingal"])
    randomDataLabels = randomData["label"].to_numpy()
    randomDataFeatures = randomData["light","sound","geoMag","cellTowerId","localAreaCode","cellTowerSingal"].to_numpy()
    randomDataFeatures_Train, randomDataFeatures_Test, randomDataLabels_Train, randomDataLabels_Test = splitData_TrainingAndTest(randomDataLabels,randomDataFeatures)

    return {randomDataFeatures_Train, randomDataFeatures_Test, randomDataLabels_Train, randomDataLabels_Test}

def splitData_TrainingAndTest(randomDataLabels,randomDataFeatures):
    """
        Split obtained data with given ratio (7:3)
    """
    randomDataFeatures_Train, randomDataFeatures_test, randomDataLabels_train, randomDataLabels_test = train_test_split(randomDataFeatures,randomDataLabels, test_size = 0.3, random_state = 1)

    return {randomDataFeatures_train, randomDataFeatures_test, randomDataLabels_train, randomDataLabels_test}
       

def fitData_withSciKit(X,y):
    """
        Use scikit learn logistic regressions package to fit multinomial data
        This function will also create the sklearn object which holds the 
        predictor method.

        X = features matrix
        y = vector of labels

        returns:
        mlr_model: multinomial logistic regression model generated by sci-kit learn
    """

    mlr_model = lm.LogisticRegression(multi_class='multinomial')
    mlr_model = mlr_model.fit(X,y)
    return mlr_model

def prediction(mlr_model,x):
    """
        use fitted data to make predictions

        mlr_model = model generated (and already fitted) by sklearn logistic regression
        x = input features for which prediction is required; can be a vector of one sample
            or array of multiple samples
    """

    obtained_predictions = mlr_model.predict(x)

    if (len(obtained_predictions) == 1): #if only one sample was inputted need to only return the answer
        return obtained_predictions[0]
    
    return obtained_predictions #if multiple samples inputted then return the array and deal with ans in calling method
